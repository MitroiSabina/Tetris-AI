import random
import math
import statistics
from operator import itemgetter
from tetris import TetrisApp
from sys import stdout

def createIndividual(size):
    result = []
    for i in range(0, size):
        result.append(random.uniform(-10, 10))
    return result

def individualFromDistribution(average, std):
    result = []
    for i in range(0, size):
        result.append(random.normalvariate(average[i], std[i]))
    return result

def createGeneration(number, size):
    results = []
    for i in range(0, number):
        tmp = createIndividual(size)
        results.append(tmp)
    return results

def generationFromDistribution(number, size, average, std):
    results = []
    for i in range(0, number):
        tmp = individualFromDistribution(average, std)
        results.append(tmp)
    return results

def mutate(x):
    tmp = createIndividual(len(x))
    for i in range(0, len(x)):
        if random.uniform(0, 1) > 0.6:
            x[i] = tmp[i]
    return x

def crossIndivuals(x, y):
    result = []
    for i in range(0, len(x)):
        if random.uniform(0, 1) > 0.5:
            result.append(y[i])
        else:
            result.append(x[i])
    return x

def selectBestIndividuals(scores, number):
    bests = list(reversed(sorted(scores, key=itemgetter(0))))[0:number]
    return list(map(lambda x: x[1], bests))

def fitness(individual):
    results = []
    for _ in range(0,5):
        results.append(TetrisApp().run(indiv))
    return int(sum(results)/len(results))

def computeAverage(population):
    result = list(reduce(lambda i1, i2: [a+b for a,b in zip(i1, i2)], population))
    result = list(map(lambda x: x/len(population), result))
    return result

def computeStandardDeviation(population):
    average = computeAverage(population)
    result = [[] for _ in range(0, len(population[0]))]
    for individual in population:
        for index, weight in enumerate(individual):
            result[index].append(weight)
    result = list(map(lambda weights: statistics.stdev(weights), result))
    return result
    #
    # result = list(reduce(lambda i1, i2: [abs(el[0]-average[index])**2 + (el[1]-average[index])**2 for index, el in enumerate(zip(i1, i2))], population))
    # result = list(map(lambda x: math.sqrt(x/len(population)), result))
    # return result

survivors_rate = 0.2
number = 50
batch = 100
size = 34

generation = createGeneration(number, size)
# survivors = [[1.7142067860819596, -0.5448484048952551, -1.043191489478625, 1.885048348671142, 1.9634444262212707, -1.2764349376834503, 0.5928281125325059, -2.6856719151979305, 1.3621513459275107, 6.301994323300324, -16.16185709249649, 1.693850333459598, -7.3760821025763, -10.901909083847395, -5.259514033790423, -5.690634353411468, -0.8442842188217288, -5.53908414747691],
# [-0.27148941596266346, -4.291578405452139, -1.4209421773881792, -2.6385644325769455, 0.40979666879000864, -4.274238276807609, 4.501570529702178, -3.588274486795605, 1.6283528356456223, 3.3735775689218377, -25.636489126243582, 9.141899384237076, -9.445858820732154, -24.302996470392124, -12.400535295975164, -5.570471361960818, 8.02475473129459, -4.584725175894235],
# [-2.2383949366564364, 0.7867218168834327, -2.0433616449366796, 2.4257433033423816, 0.7434493813203501, -0.6138650113765667, -3.4202415958323127, -6.553051518542844, -6.648563648270216, 6.677906139119979, -21.04582404911138, 5.224929290432879, -9.330780372711606, -16.577736237043613, -10.174550705297715, -4.497440471425752, 2.1992688909467715, 4.301342148385768],
# [2.178211560053106, 0.390428355594687, -3.7372969962034874, -2.4212946426490696, -0.1389281388200495, -0.1968030469589176, -4.787354993524086, -4.925667229116054, -1.2493073079977057, 0.20974398852108234, -14.322609182615446, 9.052960891627615, -7.141486725107735, -16.513642116136502, -11.444366065738349, -2.9225800808152878, 6.817398735930432, -1.5643475401531983],
# [1.0081909728672347, -1.7257315569182408, 0.6150691467753271, -1.3291639941670146, -3.095291915469756, -1.246947627477601, -3.6680522143512038, -2.3912230133969032, -4.587829759135029, -0.40094881973872987, -9.196243001980076, 4.3261536589655645, -7.316847203669908, -16.866580429991632, -8.680043309088214, -8.465388043035373, 13.473501623188378, 3.5284041256807996],
# [-0.7282641371858759, -4.214729340550356, -1.4414349403009545, 1.1269987800448917, 1.2803030487931124, 0.367711397327633, 6.022406786466299, -8.791871924811424, 0.005383190696484852, 0.4466821542421249, -14.235832865676135, 5.248113948667774, -7.9543240673305755, -20.510879697727404, -11.893657396834257, -5.1800668287698555, 6.375076105336075, -7.567461416153915],
# [2.6417489346093923, -1.5823232795389301, -1.2681492058129629, -4.840977922920787, 4.373742492640188, -0.29715416018157936, -2.330717992510952, -6.176197601147733, 1.7175950354386038, 0.40431319161947776, -17.575247446649506, 2.4323121548695097, -7.898461510656279, -18.915650000031157, -12.267546526160622, -0.8877454971287735, -2.8136746072075294, -7.065007527337679],
# [-1.223840987090294, -1.9546559805492307, 0.7160271987949312, -5.8524590752885555, 1.302566252173841, 0.43674938331943103, -0.700209293151999, -6.306082473572111, 5.071209141172921, 4.424162179384678, -17.89904088464319, 5.320601459716096, -6.62402048050557, -4.995003597234858, -12.293226344412298, -3.591030882073122, 8.840840037613795, -4.022943830674146],
# [-3.0607321959073506, -2.780504564529552, -0.43170492070556166, -5.795972963888509, -2.130053534277065, 0.15411062269094689, -0.9288403055598311, -9.266216001325727, 0.05532535320425003, 6.8703312121390265, -11.567668197751754, 3.7691118699825084, -9.01664702950949, -27.446661738565254, -9.877812505830367, -0.03021551682378565, -14.627650796794423, -4.309976960360521],
# [0.35261690195037987, -1.9239172403602411, -2.6893704611787017, -0.8756223637140301, -1.7348611893360513, -1.4600883799985906, -9.389326226976559, -2.9804488985429893, 0.9543897081636306, -2.643203036428929, -11.128772063059998, 2.5032871364043396, -5.752644575521712, -15.577647338144313, -13.816983831817726, -3.2230971320511874, -3.418692209466826, -7.432124411341505],
# [1.295927458000338, -3.0464778228900737, 0.21286215440908407, -0.8053659851029566, 0.6789781009593678, 0.9205066090577124, 0.27292373532162006, -4.862064292740097, 4.521643553652638, 3.0438089556142853, -14.427490058340789, 7.3186458751735515, -4.907317308817566, -1.6234466890841066, -7.497984709739921, -6.328760187032526, 12.874960498962192, -2.994690949588251],
# [0.14821505932429332, -2.572487897369605, -2.8409384918175067, -2.4404199863572056, -0.7430274629372675, -1.2549456594077708, -13.253152382739025, -7.45651307071118, -2.165423465828551, 4.375916039075737, -15.63775280341157, 7.398229193017219, -7.038434568738846, -16.653229654754995, -10.042680725189872, -8.33999329359261, 15.674988950435537, -4.815113463529277],
# [0.8704609781801511, 2.6424144692514275, -2.343515722515705, 0.5678942815506793, -1.5933071642158256, -0.14510974533174392, -6.448581277670475, 0.38815734219264275, 3.095176498708329, 2.3101077576461364, -12.93371125287794, 9.041796506109247, -6.227647131558119, -5.528406551086151, -7.511346469436595, -6.931254127828419, 5.730634159758482, -2.47289732165323],
# [3.693944660695041, 0.4890483421353562, -4.194975788583704, -5.858974312501419, 1.825589363884687, 1.708700619964115, 3.7152432984461994, -2.734788811023529, 2.565642777006607, 2.9896283804399113, -18.322531324802757, 9.982562989345183, -8.374224368733435, -23.524356065396333, -12.889888393985117, -4.438736358990918, -4.304244641538986, 0.4462292600006357],
# [-1.3173402194901978, -1.6334301160277385, -2.166146942409554, 5.422792604865827, 0.7336787277607936, 1.0000592479677266, -8.516801176566808, -1.8101037660617925, 5.514604647794892, 1.7114317225851918, -13.477289237547712, 6.486960126076379, -8.834075207750104, -11.575475693667467, -11.137244733083437, -4.944072750536866, 12.181564658269393, 1.1012377139322918],
# [1.1273034216229552, 0.6309610634488256, -0.2541822661315951, -3.3161708673916066, 1.5593491660505219, 3.9622543368065894, -10.610552944437877, -4.179140567094227, 3.702594402764529, 3.7968099506327553, -17.1267675338052, 1.5214185086046577, -9.191781266106299, -14.904389396125787, -12.087196188659508, -3.8976146538586565, 12.579760155946307, 3.9523336366057396],
# [-1.704736167119231, -0.8616440745038864, -2.9757198863510537, -2.4899467250531773, 1.1180620824183418, -2.354936763041046, -11.216697943904741, -2.257972546917274, -2.9115286886272513, -2.6016142460633436, -11.96893468453306, 8.658690806467595, -8.470813915252412, -22.242558956645546, -9.050901327280839, -5.44810910200348, 2.8600482268633316, 1.1544486978080861],
# [-1.9488270959847747, -0.5055158788773222, -2.665478057639306, 2.0557803233015473, -0.6615567980225949, -2.656093948157384, 1.6208504289653747, -0.7333559275106651, 0.37624978760990624, -0.946943399282711, -14.774297025896201, 11.43577032902853, -6.992434219297052, -17.854765886480358, -8.376176236817539, -4.43889460966515, 19.364178133683396, -8.965369628914349],
# [1.1832846156825478, -2.4072408784558594, -2.176986170078588, -1.5710281780013933, -1.9772268917936393, -2.5731652147007753, -17.687993829874557, -6.937500817892913, -1.4280305046488286, -0.23303320089351187, -14.925437013238023, 13.072854771442962, -8.444664088441892, -18.834181107524238, -9.67734754132528, -4.634917123346129, 15.990645338065304, -0.5174000039649651]]
#
# generation = survivors
#
# average = computeAverage(survivors)
# std = computeStandardDeviation(survivors)
#
# print ""
# print "average : ", average
# print "std : ", std
# print ""
#
# for individual in generationFromDistribution(number-len(generation), size, average, std):
#     generation.append(individual)



for b in range(0, batch):
    print("")
    print("")
    print("--- Batch " + str(b) + " ---")
    print("")
    scores = []
    for index, indiv in enumerate(generation):
        message = "\rindiv. " + str(index) + "/" + str(len(generation))
        stdout.write(message)
        stdout.flush()
        scores.append([fitness(indiv), indiv])
    print "\n"
    for value in (list(reversed(sorted(scores, key=itemgetter(0))))):
        print(value)
    survivors = selectBestIndividuals(scores, int(len(scores)*survivors_rate))
    print(len(survivors))
    generation = survivors

    average = computeAverage(survivors)
    std = computeStandardDeviation(survivors)

    print ""
    print "average : ", average
    print "std : ", std
    print ""

    for individual in generationFromDistribution(number-len(generation), size, average, std):
        generation.append(individual)

    # for survivor in survivors:
    #     generation.append(survivor)
    #     y = survivors[random.randint(0, len(survivors)-1)]
    #     generation.append(crossIndivuals(survivor, y))
    #     y = survivors[random.randint(0, len(survivors)-1)]
    #     generation.append(crossIndivuals(survivor, y))
    #     if random.uniform(0, 1) > 0.8:
    #         generation.append(mutate(survivor))
    # for individual in createGeneration(number-len(generation), size):
    #     generation.append(individual)
